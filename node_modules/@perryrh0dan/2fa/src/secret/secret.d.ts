import { QRCode } from 'qrcode';
import { ImageOptions, SecretOptions } from './types';
export declare class SecretKey {
    private _secret;
    private _label;
    private _issuer;
    constructor(secret: string, label: string, issuer: string);
    get secret(): string;
    get label(): string;
    get issuer(): string;
    image(options?: ImageOptions): QRCode;
    /**
     * Generate a Google Authenticator-compatible otpauth:// URL for passing the
     * secret to a mobile device to install the secret.
     *
     * Authenticator considers TOTP codes valid for 30 seconds. Additionally,
     * the app presents 6 digits codes to the user. According to the
     * documentation, the period and number of digits are currently ignored by
     * the app.
     */
    otpauthURL(options?: Partial<ImageOptions>): string;
}
/**
 * Generates a random secret with the set A-Z a-z 0-9 and symbols, of any length
 * (default 32). Returns the secret key in ASCII, hexadecimal, and base32 format,
 * along with the URL used for the QR code for Google Authenticator (an otpauth
 * URL). Use a QR code library to generate a QR code based on the Google
 * Authenticator URL to obtain a QR code you can scan into the app.
 */
export declare function generateSecret(options: SecretOptions): SecretKey;
/**
 * Generates a key of a certain length (default 32) from A-Z, a-z, 0-9, and
 * symbols (if requested).
 */
export declare function generateSecretASCII(length?: number, symbols?: boolean): string;
